package ru.robinhood.TelegramBotRobinHoodCapital.util;

import ru.robinhood.TelegramBotRobinHoodCapital.models.entities.Inference;
import ru.robinhood.TelegramBotRobinHoodCapital.models.entities.Topic;
import ru.robinhood.TelegramBotRobinHoodCapital.models.entities.User;
import ru.robinhood.TelegramBotRobinHoodCapital.models.entities.Wallet;

import java.time.format.DateTimeFormatter;

public class MessageHelper {

    public static String infoAccountNotWallet(User user) {
        return """
                \uD83D\uDC64<b> –ü—Ä–æ—Ñ–∏–ª—å</b> #%d \uD83D\uDC64
                                
                –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @%s
                –ò–º—è: %s
                                
                –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"""
                .formatted(
                        user.getId(),
                        user.getUsername(),
                        user.getName());
    }

    public static String infoAccount(User user, Wallet wallet) {
        Double balance = ((double) wallet.getBalance()) / 100;
        return """
                \uD83D\uDC64<b> –ü—Ä–æ—Ñ–∏–ª—å </b>#%d \uD83D\uDC64
                                
                –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @%s
                –ò–º—è: %s
                                
                –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: #%s üí∞
                –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞: %.2f USD üíµ
                """
                .formatted(
                        user.getId(),
                        user.getUsername(),
                        user.getName(),
                        wallet.getId(),
                        balance
                );
    }

    public static String infoWallet(Wallet wallet) {
        double balance = ((double) wallet.getBalance()) / 100;
        double origBalance = ((double) wallet.getOrigBalance()) / 100;

        return """
                <b>C—á–µ—Ç:</b> #%s üí∞

                –ë–∞–ª–∞–Ω—Å: %.2f USD
                –ë–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –≥–æ–¥: %.2f USD
                                
                –ó–∞—Ä–æ–±–æ—Ç–æ–∫ –≤ –¥–µ–Ω—å: %.2f USD
                –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –º–µ—Å—è—Ü: %.2f USD
                """.formatted(
                wallet.getId(),
                balance,
                ((origBalance * 300) / 100) + origBalance,
                ((origBalance * 300) / 100) / 365,
                (((origBalance * 300) / 100) / 365) * 30
        );
    }

    public static String calculate(Double number) {
        return """
                <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b> üî¢
                                
                –í–æ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã, –µ—Å–ª–∏ –≤–ª–æ–∂–∏—Ç—å %.2f USD üí∞
                                
                –ë–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü: %.2f USD
                –ë–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞: %.2f USD
                –ë–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤: %.2f USD
                –ë–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –≥–æ–¥: %.2f USD
                                
                –ó–∞—Ä–æ–±–æ—Ç–æ–∫ –≤ –¥–µ–Ω—å: %.2f USD
                –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –º–µ—Å—è—Ü: %.2f USD
                """.formatted(
                number,
                ((((number * 300) / 100) / 365) * 30) + number,
                (((((number * 300) / 100) / 365) * 30) * 3) + number,
                (((number * 300) / 100) / 2) + number,
                ((number * 300) / 100) + number,
                ((number * 300) / 100) / 365,
                (((number * 300) / 100) / 365) * 30);
    }

    public static String inferenceInfo(Inference inference) {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm");
        String status = inference.isStatus() ? "–û–±—Ä–∞–±–æ—Ç–∞–Ω %s ‚úÖ".formatted(dtf.format(inference.getUpdateAt())) :
                "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ üîÑÔ∏è";

        return """
                <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤</b>üí∞
                                    
                ID: #%s
                –ò–º—è: %s
                –°—É–º–º–∞: %s USD
                –°—Ç–∞—Ç—É—Å: %s
                
                –ù–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞.
                 
                ‚ö†Ô∏è–ü–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç—É! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ TON‚ö†Ô∏è"""
                .formatted(
                    inference.getId(),
                    inference.getOwner().getName(),
                    ((double) inference.getAmount()) / 100,
                    status);
    }

    public static Long findInferenceIdText(String text) {
        String[] lines = text.split("\n");
        Long id = null;
        for (String str : lines) {
            if (str.startsWith("ID")) {
                id = Long.parseLong(str.split(":")[1].trim().replaceAll("#", "").trim());
            }
        }
        return id;
    }

    public static String generateMessage(String[] text) {
        StringBuilder stringBuilder = new StringBuilder();

        for (int i = 1; i < text.length; i++) {
            stringBuilder.append(text[i].trim()).append(" ");
        }
        return stringBuilder.toString();
    }

    public static String generateTopic(Topic topic) {
        return """
                <b>–û–±—Ä–∞—â–µ–Ω–∏–µ</b>üÜò
                
                ID: #%s
                –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: %s
                –í–æ–ø—Ä–æ—Å: %s
                """.formatted(topic.getId(), topic.getOwner().getName(), topic.getProblem());
    }
}
