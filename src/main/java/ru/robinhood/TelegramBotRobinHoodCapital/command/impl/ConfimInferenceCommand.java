package ru.robinhood.TelegramBotRobinHoodCapital.command.impl;

import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Message;
import ru.robinhood.TelegramBotRobinHoodCapital.bot.RobbinHoodTelegramBot;
import ru.robinhood.TelegramBotRobinHoodCapital.command.Command;
import ru.robinhood.TelegramBotRobinHoodCapital.controllers.InferenceController;
import ru.robinhood.TelegramBotRobinHoodCapital.controllers.UserController;
import ru.robinhood.TelegramBotRobinHoodCapital.models.entities.Inference;
import ru.robinhood.TelegramBotRobinHoodCapital.models.entities.User;
import ru.robinhood.TelegramBotRobinHoodCapital.util.MessageHelper;
import ru.robinhood.TelegramBotRobinHoodCapital.util.enums.Role;

import java.time.LocalDateTime;
import java.util.Optional;


@Component

public class ConfimInferenceCommand implements Command {


    private final RobbinHoodTelegramBot robbinHoodTelegramBot;
    private final InferenceController inferenceController;
    private final UserController userController;

    public ConfimInferenceCommand(@Lazy RobbinHoodTelegramBot robbinHoodTelegramBot,
                                  InferenceController inferenceController,
                                  UserController userController) {
        this.robbinHoodTelegramBot = robbinHoodTelegramBot;
        this.inferenceController = inferenceController;
        this.userController = userController;
    }

    @Override
    public void execute(Message message) {
        Long adminChatId = message.getChatId();
        Long inferenceId = MessageHelper.findInferenceIdText(message.getText());

        Optional<Inference> inferenceOptional = inferenceController.findById(inferenceId);

        if (inferenceOptional.isPresent()) {
            Inference inference = inferenceOptional.get();

            String responseAdmin;

            if (inference.isStatus()) {
                responseAdmin = """
                        –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥üí∞
                                                
                        –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º""";

                robbinHoodTelegramBot.editMessage(
                        message,
                        responseAdmin,
                        null);
                return;
            }

            User user = userController.findByChatId(adminChatId).orElseThrow();

            if (user.getRole() != Role.ADMIN) {
                robbinHoodTelegramBot.sendMessage(
                        adminChatId,
                        "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
                        null);
                return;
            }

            String responseClient = getResponseClient(inference, user);

            responseAdmin = """
                    –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ üí∞
                                        
                    –í—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∑–∞—è–≤–∫—É #%s. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"""
                    .formatted(inference.getId());

            robbinHoodTelegramBot.editMessage(message, responseAdmin, null);
            robbinHoodTelegramBot.sendMessage(inference.getChatId(), responseClient, null);

            inference.setStatus(true);
            inference.setUpdateAt(LocalDateTime.now());
            inferenceController.save(inference);
        }
    }

    private String getResponseClient(Inference inference, User user) {
        double amount = inference.getAmount();
        return """
                –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥üí∞
                                    
                %s, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ %.2f USD –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–µ–Ω—å–≥–∏, –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫.
                                    
                –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.
                –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: %s""".formatted(
                        inference.getOwner().getName(),
                        amount / 100,
                        user.getName());
    }
}
